grammar robots.tasks.RDSL with org.eclipse.xtext.common.Terminals

generate rDSL "http://www.tasks.robots/RDSL"


Automata: 
	'Automaton:' name=ID
	'Class:' type = Type
	'States:' statelist += State+		//we need at least one state
	'Arrows:' arrowlist += Arrow*		//zero or more arrows
	'Start state:' startstate = [State]	//s zit in de lijst van states
	'End state:' endstates += [State]*	//een lijst van final states
;

State: 
	'State' name=ID ('do' actionlist += Action*)	//more than one action	
;

Arrow:
	'Arrow' from=[State] '->' to=[State] 'if' disjunctionlist += Conjunction+
;

Action: (DriveAction | TurnAction | StopAction | SendAction | ParkAction | BTAction | CalibrateAction | BeepAction | PrintAction | ConsumeAction) (', ')?
;
DriveAction: 'drive' driveDir = DriveDirection ('duration' dl = INT unit = TimeUnit | 'INF' ) 'speed' speed = INT//voor een bepaalde tijd of loopen en snellheid
;
TurnAction: 'turn' direction = Direction ('('min = INT ',' max = INT')' | degree = INT)// in graden of random met een max. Vraag: is dit voor implemetatie of voor de DSL?
;
StopAction: {StopAction} 'stop'	
;
ParkAction: {ParkAction} 'park'
;
CalibrateAction: {CalibrateAction} 'calibrate'
;
SendAction: 
	'send' message = Message
;
BTAction:
	{BTAction} ('init bt' slavename = STRING | 'wait for bt')
;
BeepAction:
	{BeepAction} 'beep'
;
PrintAction:
	'print' msg = STRING
;
ConsumeAction:
	{ConsumeAction} 'consume package'
;


Conjunction:
	'(and ' conjuctionlist += Condition+ ')'
;

Condition: //sensorcondition
	(LightCondition | SonarCondition | BumperCondition | ColorCondition | NewColorCondition | TimeCondition | ReceiveCondition | MissionCompleteCondition | True) (', ')?
;

ReceiveCondition:
	'receive ' message = Message
;

True:
	{True} 'true'
;

LightCondition:
	'lightsensor' side = Direction 'reads' value = LightValue
;

ColorCondition:
	'colorsensor reads' color = Color
;

NewColorCondition:
	{UncheckedCondition} 'color is new'
;

SonarCondition:
	'sonar detects' value = SonarValue 'at' distance = INT
;

BumperCondition:
	'bumper' side = Direction 'is' value = BumperValue
;

TimeCondition:
	'timeout' t = INT unit = TimeUnit
;

MissionCompleteCondition:
	{MissionCompleteCondition} 'all colors found'
;

enum BumperValue:
	PRESSED = 'pressed' | 
	NOTPRESSED = 'not pressed'
;

enum LightValue:
	BLACK = 'black' |
	WHITE = 'white'
;

enum SonarValue:
	NOTHING = 'nothing' |
	SOMETHING = 'something'
;	

enum TimeUnit:
	MS = 'ms' |
	SEC = 'sec'
;

enum Direction:
	LEFT = 'left' |
	RIGHT = 'right'
;

enum DriveDirection:
	BACKWARDS = 'backwards' |
	FORWARDS = 'forwards'
;

enum Color:
	BLUE = 'blue' |
	BLACK = 'black'|
	RED = 'red' |
	GREEN = 'green' |
	WHITE = 'white'
;

//not finished
enum Message:
	SONAR = 'sonar' |
	ALLDONE = 'all done' |
	NEWCOLOR = 'found new color' |
	ACTIONDONE = 'action done' |
	ERROR = 'found error'
;

enum Type:
	MASTER = 'master' |
	SLAVE =  'slave'
;
