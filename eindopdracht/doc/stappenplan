Plan de campagne voor DES

week 1:
- documenten aanpassen voor volgende week op basis van annotaties
- brainstormen nieuwe DSL, naar welk abstractieniveau willen we?
	Brainstorm 
	Optie 1: we blijven dichtbij de behavior-methode van LejOS. Voordeel: we hebben er veel ervaring mee, je krijgt de abitrator er gratis bij dus dan werkt het vrij snel. Nadeel: je zit vast aan de (beperkingen van) de abitrator.
	Optie 2: We implementeren zelf de state machine approach die bij ons eerste voorstel voor een DSL past. Voordeel: mooi abstract, waarschijnlijk goed te programmeren (ook: bluetooth). Nadeel: we hebben hier nog niet mee geoefend en het kost daarom waarschijnlijk meer tijd. 
	We kiezen voor de state machine approach: 
	1 abstracter
	2 makkelijk modulair te houden
	3 preciezer dan controle dmv behaviors/abitrator
	4 interessanter

- begin maken implementatie nieuwe DSL (invoeren in document en laden in Eclipse) (of: aanpassen bestaande grammatica)
	We hebben de bestaande DSL geannoteerd op basis van de veranderingen die we willen doorvoeren
	We hebben de bestaande DSL uitgebreid volgens de annotaties en wat meer opties toegevoegd aan bestaande dingen

	Assumptions bij implementatie:
	- elke state is een black box zonder bijwerkingen, ie als we niet in s1 zijn wordt er niets uitgevoerd van s1
	- de uitgaande pijlen van een state moeten 100% van alle mogelijke situaties coveren. Anders gebeurt er niets nadat de actionlist is uitgevoerd.
	- we moeten waarschijnlijk een 'true' pijl toevoegen aan de DSL.

- code generation voor de basics
	nadenken over framework voor statemachine
	nadenken over classes we willen hebben (ruimte laten voor bluetooth)
	niet te moeilijk doen in week 1, vooral correcte code genereren.

- classes testen -> supermodulair (is nu nog niet belangrijk omdat we alles rijden en ontwijken doen)
- deliverable maken: robot die kan wanderen en zonder botsen en van de tafel vallen rondjes rijdt.

Dingen die grote problemen kunnen opleveren:
- bluetooth verbinding opzetten los testen -> hoe verwerken we dit in de DSL? -> testen buiten de DSL.
- los testen met het aansturen van de RCX-motor en de temperatuursensor
- automatische code generation moet geen onmodulaire spaghetti worden, dus tussendoor heel vaak testen
- het manouvreren rond de lakes, zodat de temp-sensor goed terecht komt
- kleuren herkennen (opgelost door jozef?) -> colorsensor los testen

Laatste stukje week 1:
1. code reviewen van Mirjam (Judith)
2. documentatie op orde
3.0 example aanpassen tot hij klopt
3. Gegenereerde javacode moet correcte syntax hebben.
4. Gegenereerde javacode moet runnen op robot. 

Week 2:
- Judith installeert eclipse op desktop computer
- Nadenken over de uitvoering van state machine implementatie: kan dit beter? Overleggen met Wouter.
- prioriteit 1: werkende code op de robot krijgen. Op het moment draait er nog niets.
		op het moment: twee praktische problemen:
		- controleren of de current state in de endstatelijst zit werkt nog niet
		- de statemachine framework werkt niet helemaal naar behoren. Dit is voornamelijk te wijten aan de manier waarop we de drive-action benaderen. Als we en drive action alleen maar zien als een 'start de motor' gaat het wel goed. Oplossing: duration uit de DSL slopen., want het is totala niet nodig voor de missie. 
- als de basis van de robot werkt: begin met het opzetten van de bluetooth verbinding tussen de twee bricks.
- nog wat kleine aanpassingen maken in het report: voortgang, keuze voor statemachine beargumenteren, requirementlijst opschonen

Interessant reading material:
http://www.drdobbs.com/parallel/robots-and-finite-state-machines/184410132

Week 3:
Mirjam bouwt de Runnable class die ervoor zorgt dat wij bt-connectivity krijgen.
Opmerking van Jozef: is de DSL uitgebreid genoeg dat je kan specificeren "Als alle kleuren zijn gevonden, dan ben je klaar"?
Nadenken over een data class voor de packets die we oversturen tussen master en slave -> API bekijken (ook tip van Wouter)
Doel: op zondag 21 December doet de hele BT het (getest en al). Vrijdag 19/12 gaan we de hele dag in het lab zitten.
We hebben twee minimale instanties gebouwd, een voor de master en een voor de slave, die we kunnen gebruiken om de bluetooth-functionality te testen.
In de kerstvakantie: Colorsensor aan de praat krijgen, inbouwen in DSL, documentatie updaten aan de hand van dit document.

Data packets:
http://docs.oracle.com/javase/7/docs/api/java/io/DataInputStream.html
Conclusie: het is niet mogelijk om zelf een class/struct te definieren want de DataInputStream werkt niet primitives. We kunnen dus kiezen om alle informatie op te slaan in een byte of in een int ofzo.
Welke informatie wordt er gecommuniceerd?
Master -> slave
---------------
Klaar met parkeren			PARK_ACK		00001001
Error

Slave -> Master
---------------
Klaar met kleuren zoeken	FOUND_ALL_COLOURS
Kleur gevonden, ga parkeren	NEW_COLOR_FOUND
Klaar met meten				TEMP_ACK
Sonar meet XXX (voor ontwijken)

First bit: master = 1 or slave = 0
Second bit: found all colours = 1
Third bit: found new colour = 1
Fourth bit: action done
fifth bit: sonar measures something within earlier specified distance

De sonar info past precies in een byte, maar het is chiller om de byte te benutten voor alle info in de package.

Alternatief (werkt beter) (kan je implementeren met een switch)
-------------------------
0-255: sonar info
300: all done
400: found new colour
500: action done;
default: error (ofzo)

Verder: er zit nog een foutje in het framework: hij voert niet de laatste state uit odmat hij dan al in een finished state zit. Dit is adhoc aangepast met een extra call na de while-loop.
We kunnen nu in de instance specificeren of het een master of een slave betreft. Daar kunnen we ook de initialisatie op aanpassen. Dit is gedaan. 
De BT-connection opzetten werkt. Nu nog de threads testen en de send en receive functies schrijven.

Idee voor later:
in de instantie kunnen specificeren welke sensoren en actuatoren hij heeft.

Probleem: Sonar uitlezen kan, maar het resultaat gebruiken kan nog niet. 

De send en receive functies werken. Op het moment gebeurd het afhandelen van de pakketjes nog niet helemaal naar wens: als hij een ander pakketje heeft dan hij verwacht, wordt het pakketje weggegooit Ã©n de actie niet uitgevoerd. Is dit gewenst gedrag? 










