Plan de campagne voor DES

week 1:
- documenten aanpassen voor volgende week op basis van annotaties
- brainstormen nieuwe DSL, naar welk abstractieniveau willen we?
	Brainstorm 
	Optie 1: we blijven dichtbij de behavior-methode van LejOS. Voordeel: we hebben er veel ervaring mee, je krijgt de abitrator er gratis bij dus dan werkt het vrij snel. Nadeel: je zit vast aan de (beperkingen van) de abitrator.
	Optie 2: We implementeren zelf de state machine approach die bij ons eerste voorstel voor een DSL past. Voordeel: mooi abstract, waarschijnlijk goed te programmeren (ook: bluetooth). Nadeel: we hebben hier nog niet mee geoefend en het kost daarom waarschijnlijk meer tijd. 
	We kiezen voor de state machine approach: 
	1 abstracter
	2 makkelijk modulair te houden
	3 preciezer dan controle dmv behaviors/abitrator
	4 interessanter

- begin maken implementatie nieuwe DSL (invoeren in document en laden in Eclipse) (of: aanpassen bestaande grammatica)
	We hebben de bestaande DSL geannoteerd op basis van de veranderingen die we willen doorvoeren
	We hebben de bestaande DSL uitgebreid volgens de annotaties en wat meer opties toegevoegd aan bestaande dingen

	Assumptions bij implementatie:
	- elke state is een black box zonder bijwerkingen, ie als we niet in s1 zijn wordt er niets uitgevoerd van s1
	- de uitgaande pijlen van een state moeten 100% van alle mogelijke situaties coveren. Anders gebeurt er niets nadat de actionlist is uitgevoerd.
	- we moeten waarschijnlijk een 'true' pijl toevoegen aan de DSL.

- code generation voor de basics
	nadenken over framework voor statemachine
	nadenken over classes we willen hebben (ruimte laten voor bluetooth)
	niet te moeilijk doen in week 1, vooral correcte code genereren.

- classes testen -> supermodulair (is nu nog niet belangrijk omdat we alles rijden en ontwijken doen)
- deliverable maken: robot die kan wanderen en zonder botsen en van de tafel vallen rondjes rijdt.

Dingen die grote problemen kunnen opleveren:
- bluetooth verbinding opzetten los testen -> hoe verwerken we dit in de DSL? -> testen buiten de DSL.
- los testen met het aansturen van de RCX-motor en de temperatuursensor
- automatische code generation moet geen onmodulaire spaghetti worden, dus tussendoor heel vaak testen
- het manouvreren rond de lakes, zodat de temp-sensor goed terecht komt
- kleuren herkennen (opgelost door jozef?) -> colorsensor los testen

Laatste stukje week 1:
1. code reviewen van Mirjam (Judith)
2. documentatie op orde
3.0 example aanpassen tot hij klopt
3. Gegenereerde javacode moet correcte syntax hebben.
4. Gegenereerde javacode moet runnen op robot. 

Week 2:
- Judith installeert eclipse op desktop computer
- Nadenken over de uitvoering van state machine implementatie: kan dit beter? Overleggen met Wouter.
- prioriteit 1: werkende code op de robot krijgen. Op het moment draait er nog niets.
		op het moment: twee praktische problemen:
		- controleren of de current state in de endstatelijst zit werkt nog niet
		- de statemachine framework werkt niet helemaal naar behoren. Dit is voornamelijk te wijten aan de manier waarop we de drive-action benaderen. Als we en drive action alleen maar zien als een 'start de motor' gaat het wel goed. Oplossing: duration uit de DSL slopen., want het is totala niet nodig voor de missie. 
- als de basis van de robot werkt: begin met het opzetten van de bluetooth verbinding tussen de twee bricks.
- nog wat kleine aanpassingen maken in het report: voortgang, keuze voor statemachine beargumenteren, requirementlijst opschonen

Interessant reading material:
http://www.drdobbs.com/parallel/robots-and-finite-state-machines/184410132





